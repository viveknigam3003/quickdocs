"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const typedoc_1 = require("typedoc");
const typescript_1 = require("./typescript");
const webApi_1 = require("./webApi");
const version = typedoc_1.Application.VERSION.split(/[\.-]/);
const supportsObjectReturn = +version[1] > 23 || +version[2] >= 26;
const defaultModuleSources = ["typescript", "@types/web", "@webgpu/types"];
function load(app) {
    const failed = new Set();
    app.options.addDeclaration({
        name: "resolveUtilityTypes",
        defaultValue: true,
        help: "[typedoc-plugin-mdn-links]: Resolve references to Partial, Omit, etc to the TypeScript website.",
        type: typedoc_1.ParameterType.Boolean,
    });
    app.options.addDeclaration({
        name: "additionalModuleSources",
        help: "[typedoc-plugin-mdn-links]: Additional module sources to resolve.",
        type: typedoc_1.ParameterType.Array,
        defaultValue: [],
    });
    const resolvers = [webApi_1.resolveWebApiPath];
    function resolveName(name) {
        for (const res of resolvers) {
            const result = res(name);
            if (result)
                return result;
        }
    }
    app.converter.on(typedoc_1.Converter.EVENT_BEGIN, () => {
        if (app.options.getValue("resolveUtilityTypes")) {
            resolvers.push(typescript_1.resolveTsType);
        }
    });
    app.converter.addUnknownSymbolResolver((declaration) => {
        const validSources = [
            ...app.options.getValue("additionalModuleSources"),
            ...defaultModuleSources,
        ];
        const moduleSource = declaration.moduleSource;
        if ((moduleSource && validSources.includes(moduleSource)) ||
            (!moduleSource && declaration.resolutionStart === "global")) {
            const names = declaration.symbolReference?.path;
            if (!names)
                return;
            const dottedName = stringifyPath(names);
            const result = resolveName(names);
            if (!result && !failed.has(dottedName)) {
                failed.add(dottedName);
                app.logger.verbose(`[typedoc-plugin-mdn-links]: Failed to resolve type: ${dottedName}`);
            }
            if (supportsObjectReturn && result) {
                return {
                    target: result,
                    caption: dottedName,
                };
            }
            return result;
        }
    });
}
exports.load = load;
function stringifyPath(path) {
    let result = path[0].path;
    for (const part of path.slice(1)) {
        result += part.navigation + part.path;
    }
    return result;
}
